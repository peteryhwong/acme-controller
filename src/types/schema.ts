/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1.0/command": {
    get: operations["getCommandsWithKey"];
  };
  "/v1.0/acknowledgement": {
    post: operations["acknowledgeCommandWithKey"];
  };
  "/v1.0/report": {
    post: operations["createDeviceReportWithKey"];
  };
  "/v1.0/authentication": {
    post: operations["authentication"];
  };
  "/v1.0/assignee": {
    /** Get all assignees */
    get: operations["getAssignees"];
    /** Create an assignee */
    post: operations["createAssignee"];
  };
  "/v1.0/assignee/{assigneeId}": {
    /** Delete an assignee */
    delete: operations["deleteAssignee"];
  };
  "/v1.0/assignee/{assigneeId}/location": {
    /** Update an assignee location */
    put: operations["updateAssigneeLocation"];
  };
  "/v1.0/assignee/{assigneeId}/password": {
    /** Update an assignee password */
    put: operations["updateAssigneePassword"];
  };
  "/v1.0/device/{deviceId}/command": {
    get: operations["getCommands"];
    post: operations["sendCommand"];
  };
  "/v1.0/device": {
    get: operations["listDevices"];
    post: operations["createDevice"];
  };
  "/v1.0/device/{deviceId}": {
    get: operations["getDeviceById"];
    delete: operations["deleteDevice"];
  };
  "/v1.0/device/{deviceId}/password": {
    put: operations["updateDevicePassword"];
  };
  "/v1.0/device/{deviceId}/location": {
    put: operations["updateDeviceLocation"];
  };
  "/v1.0/device/{deviceId}/event": {
    get: operations["listDeviceEvents"];
  };
  "/v1.0/device/{deviceId}/masterprogram": {
    put: operations["updateDeviceMasterProgram"];
  };
  "/v1.0/approval/job": {
    /** Get all pending approval jobs */
    get: operations["getPendingApprovalJobs"];
  };
  "/v1.0/job": {
    /** Get all jobs */
    get: operations["getJobs"];
  };
  "/v1.0/job/{jobId}": {
    /** Get a job */
    get: operations["getJobById"];
    /** Update a job */
    put: operations["updateJob"];
  };
  "/v1.0/job/{jobId}/status": {
    /** Update a job status */
    put: operations["updateJobStatus"];
  };
  "/v1.0/job/{jobId}/approval": {
    /** Approve a job */
    post: operations["approveJob"];
  };
  "/v1.0/device/{deviceId}/job": {
    /** Get all jobs */
    get: operations["getDeviceJobs"];
    /** Create a job */
    post: operations["createJob"];
  };
  "/v1.0/location": {
    /** Get all locations */
    get: operations["getLocations"];
    /** Create a location */
    post: operations["createLocation"];
  };
  "/v1.0/location/{locationId}": {
    /** Delete a location */
    delete: operations["deleteLocation"];
  };
  "/v1.0/masterprogram": {
    /** Get all master programs */
    get: operations["getMasterPrograms"];
  };
  "/v1.0/group/{group}/treatmentplan": {
    post: operations["createTreatmentPlan"];
  };
  "/v1.0/treatmentplan": {
    get: operations["getTreatmentPlan"];
  };
  "/v1.0/treatmentplan/{treatmentPlanId}": {
    get: operations["getTreatmentPlanById"];
    put: operations["updateTreatmentPlan"];
  };
  "/v1.0/user": {
    /** Get all user */
    get: operations["getUsers"];
    /** Create an user */
    post: operations["createUser"];
  };
  "/v1.0/user/{userId}/location": {
    /** Update a user location */
    put: operations["updateUserLocation"];
  };
  "/v1.0/user/{userId}": {
    /** Delete an user */
    delete: operations["deleteUser"];
  };
}

export interface components {
  schemas: {
    JobStatus:
      | "pendingapproval"
      | "pending"
      | "standby"
      | "play"
      | "frozen"
      | "complete"
      | "cancelled"
      | "abnormal";
    BaseUser: {
      userNumber: string;
      name: string;
      /** Format: uuid */
      locationId: string;
    };
    User: components["schemas"]["BaseUser"] & {
      /** Format: uuid */
      userId: string;
      /** Format: date-time */
      createdAt: Date;
      job: {
        /** Format: uuid */
        jobId: string;
      }[];
    };
    BaseAssignee: {
      username: string;
      /** Format: uuid */
      locationId: string;
      role: "device_admin" | "device_user" | "device_maintenance";
    };
    AssigneeRequest: components["schemas"]["BaseAssignee"] & {
      password: string;
    };
    Assignee: components["schemas"]["BaseAssignee"] & {
      /** Format: uuid */
      assigneeId: string;
    };
    BaseLocation: {
      name: string;
      group: string;
    };
    Location: components["schemas"]["BaseLocation"] & {
      /** Format: uuid */
      locationId: string;
      device: {
        /** Format: uuid */
        deviceId?: string;
      }[];
    };
    ChannelLimit: {
      /** @description TENS_CH1_Intensity_Limit */
      ch1: number;
      /** @description TENS_CH2_Intensity_Limit */
      ch2: number;
      /** @description TENS_CH3_Intensity_Limit */
      ch3: number;
      /** @description TENS_CH4_Intensity_Limit */
      ch4: number;
    };
    Channel: {
      /** @description Actual_TENS_CH1_Intensity */
      ch1: number;
      /** @description Actual_TENS_CH2_Intensity */
      ch2: number;
      /** @description Actual_TENS_CH3_Intensity */
      ch3: number;
      /** @description Actual_TENS_CH4_Intensity */
      ch4: number;
    };
    BiChannelLimit: {
      /** @description TENS_CH1_Heat_Limit: 0:L/1:M/2:H */
      ch1: 0 | 1 | 2;
      /** @description TENS_CH2_Heat_Limit: 0:L/1:M/2:H */
      ch2: 0 | 1 | 2;
    };
    BiChannel: {
      /** @description Actual_TENS_CH1_Temperature: 0=1/1=M/2=H */
      ch1: 0 | 1 | 2;
      /** @description Actual_TENS_CH2_Temperature: 0=1/1=M/2=H */
      ch2: 0 | 1 | 2;
    };
    SnapshotTime: {
      /** Format: date-time */
      startedAt: Date;
      timeRemain: {
        value: number;
        unit: "minute" | "second";
      };
    };
    Acknowledgement: {
      type: "acknowledgement";
      detail: {
        commandId: string[];
        version?: string;
      };
    };
    UltrasoundSetting: {
      /** @description Ultrasound_Scheme_Enable */
      scheme: {
        oneMContinuous: boolean;
        threeMContinuous: boolean;
        oneMPulse: boolean;
        threeMPulse: boolean;
      };
      intensityLimit: {
        /** @description Ultrasound_Intensity_Limit_1M_C */
        oneMC: number;
        /** @description Ultrasound_Intensity_Limit_3M_C */
        threeMC: number;
        /** @description Ultrasound_Intensity_Limit_1M_P */
        oneMP: number;
        /** @description Ultrasound_Intensity_Limit_3M_P */
        threeMP: number;
      };
      /** @description Ultrasound_Pulse_Frequency: 0=10Hz/1=20Hz/2=50Hz/3=100Hz */
      pulseFrequencyInHz: {
        oneM: 0 | 1 | 2 | 3;
        threeM: 0 | 1 | 2 | 3;
      };
      /** @description Ultrasound_Pulse_Duty_Ratio: 0=1:1/1=1:2/2=1:5/3=1:10 */
      pulseDutyRatio: {
        oneM: 0 | 1 | 2 | 3;
        threeM: 0 | 1 | 2 | 3;
      };
      /** @description Ultrasound_Temperature_Threshold */
      temperatureThreshold: 0 | 1 | 2;
    };
    TensSetting: {
      /** @description TENS_Waveform_Enable */
      waveform: {
        wf1: boolean;
        wf2: boolean;
        wf3: boolean;
        wf4: boolean;
        wf5: boolean;
        wf6: boolean;
      };
      /** @description TENS_Channel_Enable */
      channel: {
        ch1: boolean;
        ch2: boolean;
        ch3: boolean;
        ch4: boolean;
      };
      intensitylimit: components["schemas"]["ChannelLimit"];
      heatLimit: components["schemas"]["BiChannelLimit"];
    };
    ProNewTreatmentPlan: {
      type: "pronew";
      plan: {
        ultrasound: number;
        tens: number;
      };
    };
    TreatmentPlanUpdate: components["schemas"]["ProNewTreatmentPlan"];
    TreatmentPlanHistory: components["schemas"]["TreatmentPlanUpdate"] & {
      author: string;
      /** Format: date-time */
      updatedAt: Date;
    };
    ProNewTreatmentPlanWithVersion: components["schemas"]["ProNewTreatmentPlan"] & {
      version: string;
    };
    TreatmentPlanCreateRequest: {
      type: "pronew";
    };
    TreatmentPlanWithVersionAndName: components["schemas"]["ProNewTreatmentPlanWithVersion"] & {
      /** Format: uuid */
      treatmentPlanId: string;
      name: string;
      group: string;
      /** Format: date-time */
      updatedAt: Date;
    };
    TreatmentPlanWithVersionAndNameAndHistory: components["schemas"]["TreatmentPlanWithVersionAndName"] & {
      history: components["schemas"]["TreatmentPlanHistory"][];
    };
    CustomizableProNewTreatmentPlanWithVersion: components["schemas"]["ProNewTreatmentPlanWithVersion"] & {
      customizable: boolean;
      enabled: boolean;
    };
    ProNewTreatmentPlanToggle: {
      customizable: boolean;
      enabled: boolean;
    };
    /** @description Treatment_Plan_Enable */
    ProNewTreatmentPlanSetting: {
      preset: {
        pronew001: components["schemas"]["ProNewTreatmentPlanToggle"];
        pronew002: components["schemas"]["ProNewTreatmentPlanToggle"];
        pronew003: components["schemas"]["ProNewTreatmentPlanToggle"];
        pronew004: components["schemas"]["ProNewTreatmentPlanToggle"];
        pronew005: components["schemas"]["ProNewTreatmentPlanToggle"];
        pronew006: components["schemas"]["ProNewTreatmentPlanToggle"];
        pronew007: components["schemas"]["ProNewTreatmentPlanToggle"];
        pronew008: components["schemas"]["ProNewTreatmentPlanToggle"];
      };
    };
    /** @description Treatment_Plan_Enable */
    ProNewPlanSetting: {
      preset: {
        pronew001: components["schemas"]["CustomizableProNewTreatmentPlanWithVersion"];
        pronew002: components["schemas"]["CustomizableProNewTreatmentPlanWithVersion"];
        pronew003: components["schemas"]["CustomizableProNewTreatmentPlanWithVersion"];
        pronew004: components["schemas"]["CustomizableProNewTreatmentPlanWithVersion"];
        pronew005: components["schemas"]["CustomizableProNewTreatmentPlanWithVersion"];
        pronew006: components["schemas"]["CustomizableProNewTreatmentPlanWithVersion"];
        pronew007: components["schemas"]["CustomizableProNewTreatmentPlanWithVersion"];
        pronew008: components["schemas"]["CustomizableProNewTreatmentPlanWithVersion"];
      };
    };
    /** @description Treatment_Plan_Enable */
    ProPlanSetting: {
      ultrasound30Tens0: boolean;
      ultrasound20Tens10: boolean;
      ultrasound10Tens20: boolean;
      ultrasound0Tens30: boolean;
    };
    ProSetting: {
      plan: Partial<components["schemas"]["ProNewTreatmentPlanSetting"]> &
        Partial<components["schemas"]["ProNewPlanSetting"]> &
        Partial<components["schemas"]["ProPlanSetting"]>;
      ultrasoundSetting: components["schemas"]["UltrasoundSetting"];
      tensSetting: components["schemas"]["TensSetting"];
    };
    BaseJob: {
      treatmentPlan: {
        type: "pro" | "pronew";
        detail: components["schemas"]["ProSetting"];
      };
    };
    BaseJobWithAssignee: components["schemas"]["BaseJob"] & {
      /** Format: uuid */
      assigneeId: string;
      /** Format: uuid */
      userId: string;
    };
    BaseJobWithAssigneeWithDeviceId: components["schemas"]["BaseJobWithAssignee"] & {
      /** Format: uuid */
      deviceId: string;
    };
    BaseJobWithJobId: components["schemas"]["BaseJob"] & {
      jobId: string;
    };
    JobUpdateStatus: {
      status: "play" | "frozen" | "cancelled";
    };
    BaseJobWithJobIdAndAssigneeAndStatus: components["schemas"]["BaseJobWithJobId"] & {
      /** Format: uuid */
      userId: string;
      /** Format: uuid */
      assigneeId: string;
      status: components["schemas"]["JobStatus"];
    };
    BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId: components["schemas"]["BaseJobWithJobIdAndAssigneeAndStatus"] & {
      /** Format: date-time */
      datetime?: Date;
      /** Format: uuid */
      deviceId: string;
      offlineJobId?: string;
    };
    TreatmentWithJobIdAndStatusAndAssigneeAndDeviceId: {
      detail: {
        treatment: components["schemas"]["TreatmentSnapshot"];
      };
      /** Format: uuid */
      userId: string;
      /** Format: uuid */
      deviceId: string;
      /** Format: uuid */
      assigneeId: string;
      status: components["schemas"]["JobStatus"];
      /** Format: uuid */
      jobId: string;
    };
    TreatmentPlanWithJobIdAndStatusAndAssigneeAndDeviceId: {
      detail: components["schemas"]["BaseJob"];
      /** Format: uuid */
      deviceId: string;
      /** Format: uuid */
      userId: string;
      /** Format: uuid */
      assigneeId: string;
      status: components["schemas"]["JobStatus"];
      /** Format: uuid */
      jobId: string;
    };
    ErrorWithJobIdAndStatusAndAssigneeAndDeviceId: {
      detail: components["schemas"]["DeviceError"];
      /** Format: uuid */
      deviceId: string;
      /** Format: uuid */
      userId: string;
      /** Format: uuid */
      assigneeId: string;
      status: components["schemas"]["JobStatus"];
      /** Format: uuid */
      jobId: string;
    };
    BaseJobWithJobIdAndStatusAndAssigneeAndDeviceIdAndHistory: components["schemas"]["BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId"] & {
      jobHistory: ((
        | components["schemas"]["TreatmentPlanWithJobIdAndStatusAndAssigneeAndDeviceId"]
        | components["schemas"]["TreatmentWithJobIdAndStatusAndAssigneeAndDeviceId"]
        | components["schemas"]["ErrorWithJobIdAndStatusAndAssigneeAndDeviceId"]
      ) & {
        /** Format: uuid */
        jobHistoryId: string;
        author: string;
        type: string;
        /** Format: date-time */
        datetime?: Date;
      })[];
    };
    AssigneeAtJob: {
      username: string;
      hash: string;
    };
    JobDetail: components["schemas"]["BaseJobWithJobId"] & {
      action: "create" | "update";
      assignee: components["schemas"]["AssigneeAtJob"];
    };
    JobAction: {
      action: "freeze" | "play" | "cancel";
      jobId: string;
    };
    Ping: {
      command: "ping";
    };
    BaseMasterProgram: {
      version: string;
    };
    BaseMasterProgramWithDetail: {
      version: string;
      /** Format: date-time */
      datetime: Date;
    };
    MasterProgramUpgradeDetail: {
      VersionCode: string;
      VersionName: string;
      ModifyContent: string;
      DownloadUrl: string;
      ApkSize: string;
      ApkMd5: string;
    };
    MasterProgramUpgrade: {
      command: "masterprogramupgrade";
      detail: components["schemas"]["MasterProgramUpgradeDetail"];
    };
    BaseCommand: {
      command:
        | components["schemas"]["JobDetail"]
        | components["schemas"]["JobAction"]
        | components["schemas"]["Ping"]
        | components["schemas"]["MasterProgramUpgrade"];
    };
    Command: components["schemas"]["BaseCommand"] & {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      createDate: Date;
      type: 1 | 2 | 3 | 4;
    };
    CommandWithStatus: components["schemas"]["Command"] & {
      status: "pending" | "pending-processing" | "acknowledged";
    };
    UltrasoundSnapshot: {
      /** @description Ultrasound_Scheme_Selected */
      scheme:
        | "oneMContinuous"
        | "threeMContinuous"
        | "oneMPulse"
        | "threeMPulse";
      /** @description Actual_Ultrasound_Intensity */
      intensity: number;
      /** @description Actual_Ultrasound_Pulse_Frequency: 0=10Hz/1=20Hz/2=50Hz/3=100Hz */
      pulseFrequencyInHz: 0 | 1 | 2 | 3;
      /** @description Actual_Ultrasound_Pulse_Duty_Ratio: 0=1:1/1=1:2/2=1:5/3=1:10 */
      pulseDutyRatio: 0 | 1 | 2 | 3;
      /** @description Actual_Ultrasound_Temperature: 数据范围 = 0-119; 0=-20°C; 119=99°C */
      temperature: number;
      time?: components["schemas"]["SnapshotTime"];
    };
    TensSnapshot: {
      /** @description Actual_TENS_Waveform */
      waveform: "wf1" | "wf2" | "wf3" | "wf4" | "wf5" | "wf6";
      intensity: components["schemas"]["Channel"];
      temperature: components["schemas"]["BiChannel"];
      time?: components["schemas"]["SnapshotTime"];
    };
    /** @description Treatment_Plan_Selected */
    ProNewPlanSnapshot: {
      plan: {
        tens: number;
        ultrasound: number;
      };
      name:
        | "pronew001"
        | "pronew002"
        | "pronew003"
        | "pronew004"
        | "pronew005"
        | "pronew006"
        | "pronew007"
        | "pronew008";
    };
    /** @description Treatment_Plan_Selected */
    ProPlanSnapshot:
      | "ultrasound30Tens0"
      | "ultrasound20Tens10"
      | "ultrasound10Tens20"
      | "ultrasound0Tens30"
      | "ultrasoundXTensY";
    ProSnapshot: {
      plan:
        | components["schemas"]["ProNewPlanSnapshot"]
        | components["schemas"]["ProPlanSnapshot"];
      ultrasoundSnapshot: components["schemas"]["UltrasoundSnapshot"];
      tensSnapshot: components["schemas"]["TensSnapshot"];
    };
    TreatmentSnapshot: {
      type: "pro" | "pronew";
      detail: components["schemas"]["ProSnapshot"];
    };
    JobHistory: {
      type: "interim" | "completion";
      jobId: string;
      offlineJobId?: string;
      detail: {
        assigneeUsername: string;
        status:
          | "pendingapproval"
          | "standby"
          | "Standby"
          | "play"
          | "Play"
          | "pause"
          | "Pause"
          | "frozen"
          | "Frozen"
          | "complete"
          | "Complete"
          | "cancelled"
          | "Cancel"
          | "cancel"
          | "abnormal"
          | "Abnormal";
        treatment: components["schemas"]["TreatmentSnapshot"];
      };
    };
    DeviceError: {
      error:
        | "ultrasoundOverheat"
        | "tensCh1Shorted"
        | "tensCh2Shorted"
        | "tensCh3Shorted"
        | "tensCh4Shorted";
      /** Format: date-time */
      startedAt: Date;
      /** Format: date-time */
      endedAt?: Date;
    };
    ErrorHistory: {
      detail: components["schemas"]["DeviceError"];
      type: "error";
      jobId: string;
      offlineJobId?: string;
    };
    DeviceReport: {
      detail: (
        | components["schemas"]["JobHistory"]
        | components["schemas"]["ErrorHistory"]
      )[];
    };
    BaseDevice: {
      code: string;
      type: string;
      /** Format: uuid */
      locationId: string;
    };
    DeviceStatus: {
      status: "online" | "offline" | "unknown";
      passwordUpdated?: boolean;
      masterProgramVersion?: string;
    };
    DeviceHistory: {
      /** Format: date-time */
      datetime: Date;
      detail: components["schemas"]["DeviceStatus"];
    };
    Device: components["schemas"]["BaseDevice"] & {
      /** Format: uuid */
      deviceId: string;
      passcode?: string;
      status: string;
      masterProgramVersion?: string;
      deviceHistory: components["schemas"]["DeviceHistory"][];
    };
    DeviceRequest: components["schemas"]["BaseDevice"] & {
      password: string;
    };
    EventReport:
      | components["schemas"]["JobHistory"]
      | components["schemas"]["ErrorHistory"]
      | components["schemas"]["Acknowledgement"];
    Event: {
      /** Format: uuid */
      eventId: string;
      /** Format: date-time */
      datetime: Date;
      type: "heartbeat" | "devicereport" | "healthcheck" | "ping";
      detail:
        | {
            /** Format: uuid */
            deviceId: string;
            report: components["schemas"]["DeviceReport"];
          }
        | { [key: string]: unknown };
      status: string;
      /** Format: uuid */
      deviceId?: string;
    };
    AuthenticationRequest: {
      username: string;
      password: string;
      type: "device" | "user";
    };
    Error: {
      error_code: string;
      error_message: string;
    };
    ConnectivityBase: {
      code: number;
      message: string;
    };
    ConnectivityError: components["schemas"]["ConnectivityBase"] & {
      object: { [key: string]: unknown } | null;
    };
  };
  parameters: {
    userIdPath: string;
    locationIdPath: string;
    assigneeIdPath: string;
    deviceIdPath: string;
    jobIdPath: string;
    groupPath: string;
    treatmentPlanIdPath: string;
    jobId: string;
    deviceId: string;
    commandId: string;
    /** @description Command status */
    commandStatus: ("pending" | "pending-processing" | "acknowledged")[];
    /** @description Include deleted */
    includeDeleted: boolean;
    /** @description Force command */
    forceCommand: boolean;
  };
}

export interface operations {
  getCommandsWithKey: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConnectivityBase"] & {
            object: {
              command: components["schemas"]["Command"][];
            };
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
    };
  };
  acknowledgeCommandWithKey: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConnectivityBase"] & {
            object: components["schemas"]["Acknowledgement"];
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Acknowledgement"];
      };
    };
  };
  createDeviceReportWithKey: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ConnectivityBase"] & {
            object: {
              /** Format: uuid */
              reportId: string;
            };
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeviceReport"];
      };
    };
  };
  authentication: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConnectivityBase"] & {
            object: {
              valid: boolean;
              type: string;
              role: string;
            };
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ConnectivityError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthenticationRequest"];
      };
    };
  };
  /** Get all assignees */
  getAssignees: {
    parameters: {
      query: {
        /** Include deleted */
        includeDeleted?: components["parameters"]["includeDeleted"];
      };
    };
    responses: {
      /** Assignees found */
      200: {
        content: {
          "application/json": {
            assignee: components["schemas"]["Assignee"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create an assignee */
  createAssignee: {
    responses: {
      /** Assignee created */
      201: {
        content: {
          "application/json": components["schemas"]["Assignee"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssigneeRequest"];
      };
    };
  };
  /** Delete an assignee */
  deleteAssignee: {
    parameters: {
      path: {
        assigneeId: components["parameters"]["assigneeIdPath"];
      };
    };
    responses: {
      /** Assignee deleted */
      200: {
        content: {
          "application/json": {
            assigneeId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Update an assignee location */
  updateAssigneeLocation: {
    parameters: {
      path: {
        assigneeId: components["parameters"]["assigneeIdPath"];
      };
    };
    responses: {
      /** Assignee location updated */
      200: {
        content: {
          "application/json": {
            assigneeId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          locationId: string;
        };
      };
    };
  };
  /** Update an assignee password */
  updateAssigneePassword: {
    parameters: {
      path: {
        assigneeId: components["parameters"]["assigneeIdPath"];
      };
    };
    responses: {
      /** Assignee password updated */
      200: {
        content: {
          "application/json": {
            assigneeId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          password: string;
        };
      };
    };
  };
  getCommands: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceId"];
      };
      query: {
        /** Command status */
        status?: components["parameters"]["commandStatus"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            command: components["schemas"]["CommandWithStatus"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  sendCommand: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceId"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /** Format: uuid */
            commandId?: string;
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseCommand"];
      };
    };
  };
  listDevices: {
    parameters: {
      query: {
        /** Include deleted */
        includeDeleted?: components["parameters"]["includeDeleted"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            devices: components["schemas"]["Device"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  createDevice: {
    responses: {
      201: {
        content: {
          "application/json": {
            deviceId?: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeviceRequest"];
      };
    };
  };
  getDeviceById: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Device"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  deleteDevice: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            deviceId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  updateDevicePassword: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            deviceId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          password: string;
        };
      };
    };
  };
  updateDeviceLocation: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            deviceId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          locationId: string;
        };
      };
    };
  };
  listDeviceEvents: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            event: components["schemas"]["Event"][];
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  updateDeviceMasterProgram: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BaseMasterProgram"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseMasterProgram"];
      };
    };
  };
  /** Get all pending approval jobs */
  getPendingApprovalJobs: {
    responses: {
      /** Jobs retrieved */
      200: {
        content: {
          "application/json": {
            job?: components["schemas"]["BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get all jobs */
  getJobs: {
    responses: {
      /** Jobs retrieved */
      200: {
        content: {
          "application/json": {
            job?: components["schemas"]["BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get a job */
  getJobById: {
    parameters: {
      path: {
        jobId: components["parameters"]["jobIdPath"];
      };
    };
    responses: {
      /** Job retrieved */
      200: {
        content: {
          "application/json": components["schemas"]["BaseJobWithJobIdAndStatusAndAssigneeAndDeviceIdAndHistory"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Update a job */
  updateJob: {
    parameters: {
      path: {
        jobId: components["parameters"]["jobIdPath"];
      };
    };
    responses: {
      /** Job updated */
      200: {
        content: {
          "application/json": components["schemas"]["BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseJobWithAssigneeWithDeviceId"];
      };
    };
  };
  /** Update a job status */
  updateJobStatus: {
    parameters: {
      path: {
        jobId: components["parameters"]["jobIdPath"];
      };
      query: {
        /** Force command */
        forceCommand?: components["parameters"]["forceCommand"];
      };
    };
    responses: {
      /** Job updated */
      200: {
        content: {
          "application/json": components["schemas"]["JobUpdateStatus"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JobUpdateStatus"];
      };
    };
  };
  /** Approve a job */
  approveJob: {
    parameters: {
      path: {
        jobId: components["parameters"]["jobIdPath"];
      };
    };
    responses: {
      /** Job approved */
      200: {
        content: {
          "application/json": components["schemas"]["BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          approval: boolean;
        };
      };
    };
  };
  /** Get all jobs */
  getDeviceJobs: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceId"];
      };
    };
    responses: {
      /** Jobs retrieved */
      200: {
        content: {
          "application/json": {
            job: components["schemas"]["BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a job */
  createJob: {
    parameters: {
      path: {
        deviceId: components["parameters"]["deviceId"];
      };
    };
    responses: {
      /** Job created */
      201: {
        content: {
          "application/json": components["schemas"]["BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseJobWithAssignee"];
      };
    };
  };
  /** Get all locations */
  getLocations: {
    parameters: {
      query: {
        /** Include deleted */
        includeDeleted?: components["parameters"]["includeDeleted"];
      };
    };
    responses: {
      /** Locations found */
      200: {
        content: {
          "application/json": {
            location?: components["schemas"]["Location"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a location */
  createLocation: {
    responses: {
      /** Location created */
      201: {
        content: {
          "application/json": components["schemas"]["Location"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseLocation"];
      };
    };
  };
  /** Delete a location */
  deleteLocation: {
    parameters: {
      path: {
        locationId: components["parameters"]["locationIdPath"];
      };
    };
    responses: {
      /** Location deleted */
      200: {
        content: {
          "application/json": {
            locationId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get all master programs */
  getMasterPrograms: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            masterprogram: components["schemas"]["BaseMasterProgramWithDetail"][];
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  createTreatmentPlan: {
    parameters: {
      path: {
        group: components["parameters"]["groupPath"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            treatmentplan?: components["schemas"]["TreatmentPlanWithVersionAndName"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TreatmentPlanCreateRequest"];
      };
    };
  };
  getTreatmentPlan: {
    responses: {
      200: {
        content: {
          "application/json": {
            treatmentplan?: components["schemas"]["TreatmentPlanWithVersionAndName"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getTreatmentPlanById: {
    parameters: {
      path: {
        treatmentPlanId: components["parameters"]["treatmentPlanIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TreatmentPlanWithVersionAndNameAndHistory"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  updateTreatmentPlan: {
    parameters: {
      path: {
        treatmentPlanId: components["parameters"]["treatmentPlanIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TreatmentPlanWithVersionAndName"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TreatmentPlanUpdate"];
      };
    };
  };
  /** Get all user */
  getUsers: {
    parameters: {
      query: {
        /** Include deleted */
        includeDeleted?: components["parameters"]["includeDeleted"];
      };
    };
    responses: {
      /** Users found */
      200: {
        content: {
          "application/json": {
            user: components["schemas"]["User"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create an user */
  createUser: {
    responses: {
      /** User created */
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseUser"];
      };
    };
  };
  /** Update a user location */
  updateUserLocation: {
    parameters: {
      path: {
        userId: components["parameters"]["userIdPath"];
      };
    };
    responses: {
      /** User location updated */
      200: {
        content: {
          "application/json": {
            userId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          locationId: string;
        };
      };
    };
  };
  /** Delete an user */
  deleteUser: {
    parameters: {
      path: {
        userId: components["parameters"]["userIdPath"];
      };
    };
    responses: {
      /** User deleted */
      200: {
        content: {
          "application/json": {
            userId: string;
          };
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}
